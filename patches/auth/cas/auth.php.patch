diff --git a/auth/cas/auth.php b/auth/cas/auth.php
index eff89db..9de071f 100644
--- a/auth/cas/auth.php
+++ b/auth/cas/auth.php
@@ -658,6 +658,8 @@ if ( !is_object($PHPCAS_CLIENT) ) {
     function sync_users ($bulk_insert_records = 1000, $do_updates = true) {
         global $CFG;
 
+        require_once($CFG->libdir.'/ddllib.php');
+
         if(empty($this->config->host_url)) {
             echo "No LDAP server configured for CAS! Syncing disabled.\n";
             return;
@@ -669,40 +671,18 @@ if ( !is_object($PHPCAS_CLIENT) ) {
                                  /// from within a PHP application using persistent connections
         // configure a temp table
         print "Configuring temp table\n";
-        switch (strtolower($CFG->dbfamily)) {
-            case 'mysql':
-                $temptable = $CFG->prefix . 'extuser';
-                $droptablesql[] = 'DROP TEMPORARY TABLE ' . $temptable; // sql command to drop the table (because session scope could be a problem)
-                execute_sql_arr($droptablesql, true, false); /// Drop temp table to avoid persistence problems later
-                echo "Creating temp table $temptable\n";
-                execute_sql('CREATE TEMPORARY TABLE ' . $temptable . ' (username VARCHAR(64), PRIMARY KEY (username)) ENGINE=MyISAM', false);
-                break;
-            case 'postgres':
-                $temptable = $CFG->prefix . 'extuser';
-                $droptablesql[] = 'DROP TABLE ' . $temptable; // sql command to drop the table (because session scope could be a problem)
-                execute_sql_arr($droptablesql, true, false); /// Drop temp table to avoid persistence problems later
-                echo "Creating temp table $temptable\n";
-                $bulk_insert_records = 1; // no support for multiple sets of values
-                execute_sql('CREATE TEMPORARY TABLE '. $temptable . ' (username VARCHAR(64), PRIMARY KEY (username))', false);
-                break;
-            case 'mssql':
-                $temptable = '#'.$CFG->prefix . 'extuser'; /// MSSQL temp tables begin with #
-                $droptablesql[] = 'DROP TABLE ' . $temptable; // sql command to drop the table (because session scope could be a problem)
-                execute_sql_arr($droptablesql, true, false); /// Drop temp table to avoid persistence problems later
-                echo "Creating temp table $temptable\n";
-                $bulk_insert_records = 1; // no support for multiple sets of values
-                execute_sql('CREATE TABLE ' . $temptable . ' (username VARCHAR(64), PRIMARY KEY (username))', false);
-                break;
-            case 'oracle':
-                $temptable = $CFG->prefix . 'extuser';
-                $droptablesql[] = 'TRUNCATE TABLE ' . $temptable; // oracle requires truncate before being able to drop a temp table
-                $droptablesql[] = 'DROP TABLE ' . $temptable; // sql command to drop the table (because session scope could be a problem)
-                execute_sql_arr($droptablesql, true, false); /// Drop temp table to avoid persistence problems later
+
+        $table = new XMLDBTable('extuser');
+        $table->addFieldInfo('username', XMLDB_TYPE_CHAR, 100, null, null, null, null, null, null);
+        $table->addFieldInfo('mnethostid', XMLDB_TYPE_INTEGER, 10, XMLDB_UNSIGNED, null, null, null, null, null);
+        $table->addKeyInfo('primary', XMLDB_KEY_PRIMARY, array('username', 'mnethostid'));
+
         echo "Creating temp table $temptable\n";
-                $bulk_insert_records = 1; // no support for multiple sets of values
-                execute_sql('CREATE GLOBAL TEMPORARY TABLE '.$temptable.' (username VARCHAR(64), PRIMARY KEY (username)) ON COMMIT PRESERVE ROWS', false);
-                break;
+        if (!create_temp_table($table, false)) {
+            print  "Failed to create temporary users table - aborting\n";
+            exit;
         }
+
         print "Connecting to ldap...\n";
         $ldapconnection = $this->ldap_connect();
         if (!$ldapconnection) {
@@ -773,7 +753,7 @@ if ( !is_object($PHPCAS_CLIENT) ) {
         if (!empty($this->config->removeuser)) {
             $sql = "SELECT u.id, u.username, u.email, u.auth
                     FROM {$CFG->prefix}user u
-                        LEFT JOIN $temptable e ON u.username = e.username
+                        LEFT JOIN $temptable e ON u.username = e.username AND u.mnethostid = e.mnethostid
                     WHERE u.auth='cas'
                         AND u.deleted=0
                         AND e.username IS NULL";
@@ -808,6 +788,7 @@ if ( !is_object($PHPCAS_CLIENT) ) {
             $sql = "SELECT u.id, u.username
                     FROM $temptable e, {$CFG->prefix}user u
                     WHERE e.username=u.username
+                        AND e.mnethostid=u.mnethostid
                         AND u.auth='nologin'";
             $revive_users = get_records_sql($sql);
             if (!empty($revive_users)) {
@@ -899,7 +880,7 @@ if ( !is_object($PHPCAS_CLIENT) ) {
         // and gives me a nifty object I don't want.
         // note: we do not care about deleted accounts anymore, this feature was replaced by suspending to nologin auth plugin
         $sql = "SELECT e.username, e.username
-                FROM $temptable e LEFT JOIN {$CFG->prefix}user u ON e.username = u.username
+                FROM $temptable e LEFT JOIN {$CFG->prefix}user u ON e.username = u.username AND e.mnethostid = u.mnethostid
                 WHERE u.id IS NULL";
         $add_users = get_records_sql($sql); // get rid of the fat
         if (!empty($add_users)) {
@@ -995,12 +976,14 @@ if ( !is_object($PHPCAS_CLIENT) ) {
      * @param array $users is an array of usernames
      */
     function ldap_bulk_insert($users, $temptable) {
+        global $CFG;
+
         // bulk insert -- superfast with $bulk_insert_records
-        $sql = 'INSERT INTO ' . $temptable . ' (username) VALUES ';
+        $sql = 'INSERT INTO ' . $temptable . ' (username, mnethostid) VALUES ';
         // make those values safe
         $users = addslashes_recursive($users);
         // join and quote the whole lot
-        $sql = $sql . "('" . implode("'),('", $users) . "')";
+        $sql = $sql . "('" . implode("', $CFG->mnet_localhost_id),('", $users) . "', $CFG->mnet_localhost_id)";
         print "\t+ " . count($users) . " users\n";
         execute_sql($sql, false);
     }
